FORMAT: 1A
HOST: https://murmuring-fjord-85655.herokuapp.com/api/v1

# PhotoScout
API behind the PhotoScout service. PhotoScout allows you to quickly and effortlessly prepare your photoshoots. Get insipiration, plan, prepare, and spend more time on the fields and less behind the screen.

::: warning
#### <i class="fa fa-warning"></i> API authenticated access
**All API entrypoints**, unless specified otherwise, are **expecting an authentication header** containing an active JWT token.

The header is expected to be in the following format:
```http
Authorization: Basic <jwt_token>:*
```
:::

<!-- include(include/data_structures.apib) -->

# Group User

## User Authentication [/user/auth]
### Validate JWT token [GET]

Used to validate a JWT token, useful to quickly check if it's expired.

Answer *200* for valid tokens and *401* otherwise.

+ Request
    + Headers

            Authorization: Basic <jwt_token>:*

+ Response 200
+ Response 401

### Retrieve JWT token [POST]

Generate a jwt token for the user if both username and password are valid. JWT token will be used for all further authenticated interactions with the API.

If both password and username are valid, the API will answer by a *200* and return the JWT token in the body, otherwise the API will answer a *401*. Note that it will also answer *401* in case of missing authentication information.


+ Request
    + Headers

            Authorization: Basic <username>:<password>

+ Response 200 (application/json)

            {
                "token": "jwt_token"
            }
+ Response 401 (html/text)

    + Headers

            WWW-Authenticate: Basic realm="Authentication Required"

    + Body

            Unauthorized Access

## User administration [/user]
### Create a new user [POST]
::: note
#### <i class="fa fa-key"></i> This entrypoint does not require authentication
:::
Create a new user for the service.

+ Request (application/json)
    + Body

            {
                "username": "johndoe",
                "password": "123456"
            }

+ Response 201

### Delete the user account [DELETE]
Delete the account of the user.

+ Response 200

## User Info [/user/info]
### Get user information [GET]

Get the information of the current user.


+ Response 200 (application/json)

            {
                "id": 0,
                "username": "jdoe",
                "fullname": "John Doe"
            }

### Modify user data [PATCH]
Modify the user information.

Fields that can be modified through this entrypoint are:
 * fullname
 * password

In case password is modified, previous password needs to be sent along the new one.

+ Request (application/json)
    + Body

            {
                "fullname": "John Doe"
            }

+ Response 200

+ Request for changing password (application/json)
    + Body

            {
                "password": "abcxyz",
                "oldpass": "123456"
            }

+ Response 200
+ Response 400 (application/json)

            {
                "error": "Old password invalid"
            }


## Other users info [/user/info/{username}]

+ Parameters

    + username: `johndoe` (required, string)

### Get another user information [GET]

Get information about other users using the service.

+ Response 200 (application/json)

            {
                "id": 0,
                "username": "jdoe",
                "fullname": "John Doe"
            }

+ Response 404 (application/json)

            {
                "error": "No user found"
            }

# Group Guide

## Public guides listing [/guides/public/{?page,per_page}]

+ Parameters

    + page: `2` (optional, integer)
        + Default: `1`
    + per_page: `20` (optional, integer) - Number of guides to return.
        + Default: `10`

### Get a list of public guides [GET]
::: note
#### <i class="fa fa-key"></i> This entrypoint does not require authentication
:::
Return a defined number of public guides' short info. The number is defined by the `per_page` arguments. User can request other pages using the `page` arguments.

+ Response 200 (application/json)
    + Attributes(GuideInfoArray)

## Guides listing [/guides/{?page,per_page}]

+ Parameters

    + page: `2` (optional, integer)
        + Default: `1`
    + per_page: `20` (optional, integer) - Number of guides to return.
        + Default: `10`

### Get a list of the user guides [GET]
Return a defined number of guides' short info. The number is defined by the `per_page` arguments. User can request other pages using the `page` arguments.

+ Response 200 (application/json)
    + Attributes(GuideInfoArray)

## Guide [/guide]
### Create a new guide [POST]

+ Response 201

## Guide general information [/guide/{id}]

+ Parameters

    + id: `0` (required, integer)

### Get the information for a guide [GET]
Get the information for the given guide.

+ Response 200 (application/json)
    + Attributes(GuideInfo)

+ Response 404 (application/json)

            {
                "error": "Guide not found"
            }

### Modify the guide information [PATCH]
Modify the guide information. Every fields in the request body are **optional**, however, only the one shown in the example below will be recognized. Note that `last-edited` is updated automatically every time the guide is modified through this request or any other (adding photo, removing photo, etc.)

+ Request (application/json)
    + Body

            {
                "title": "Example guide",
                "featured-image": "http://foo.bar/image.jpg",
                "visibility": false
            }

+ Response 200 (application/json)
    + Attributes(GuideInfo)

+ Response 404 (application/json)

            {
                "error": "Guide not found"
            }

### Delete a guide [DELETE]
Delete the given guide.

+ Response 200

+ Response 404 (application/json)

            {
                "error": "Guide not found"
            }

# Group Photo
## Photo general information [/photo/{id}]

+ Parameters

    + id: `2` (required, integer) - Internal ID of the photo



## Search photos [/photo/search{?keywords,page,origin}]
This entrypoint will call the target api search function and return its content. May return *400* in case the call to the other APIs failed, if so it will try to give a reason.

+ Parameters

    + keywords: `keyword list` (required, string) - Space separated list of keywords to search
    + page: `2` (optional, integer) - Page to retrieve from the api
        + Default: `1`
    + origin: `Flickr` (optional, string) - Define in which api to search
        + Default: `Flickr`
### Search photos in api [GET]

+ Response 200
+ Response 400

            {
                "error": "Flickr API returned an error"
            }